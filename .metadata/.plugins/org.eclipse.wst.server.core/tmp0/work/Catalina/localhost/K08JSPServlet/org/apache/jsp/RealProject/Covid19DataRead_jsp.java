/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.55
 * Generated at: 2021-12-16 02:20:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.RealProject;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Covid19DataRead_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.13.0/themes/base/jquery-ui.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/resources/demos/style.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.js\"></script>\r\n");
      out.write("<script src=\"https://code.jquery.com/ui/1.13.0/jquery-ui.js\"></script>\r\n");
      out.write(" \r\n");
      out.write("<script>\r\n");
      out.write("$(function() {//jQuery UI의 데이트피커 선언. 한국에서 사용하는 날짜포맷으로 변경\r\n");
      out.write("	$( \"#startCreateDt\" ).datepicker();\r\n");
      out.write("	$( \"#startCreateDt\" ).datepicker( \"option\", \"dateFormat\", \"yy-mm-dd\");\r\n");
      out.write("	$( \"#endCreateDt\" ).datepicker();\r\n");
      out.write("	$( \"#endCreateDt\" ).datepicker( \"option\", \"dateFormat\", \"yy-mm-dd\" );\r\n");
      out.write("	\r\n");
      out.write("	//문서가 로드될때 $.ajax()에서 사용할 기본적인 속성 선언\r\n");
      out.write("	$.ajaxSetup({\r\n");
      out.write("		url : \"../Covid19DataRead.do\",\r\n");
      out.write("		type : \"get\",\r\n");
      out.write("		contentType : \"text/html;charset:utf-8;\",\r\n");
      out.write("		dataType : \"xml\",//콜백데이터 타입\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	$('#submitBtn').click(function() {\r\n");
      out.write("		//날짜에 포함된 -(하이픈)을 replace()를 통해 제거\r\n");
      out.write("		var scd = $('#startCreateDt').val().replace(/-/g,'');\r\n");
      out.write("		var ecd = $('#endCreateDt').val().replace(/-/g,'');\r\n");
      out.write("		/*\r\n");
      out.write("		/-/g 와 같은 정규표현식을 사용하면 문자열 내의 모든 하이픈을 제거해준다.\r\n");
      out.write("		정규표현식을 쓰지 않으면 앞에 있는 하이픈 하나만 제거된다.\r\n");
      out.write("		*/\r\n");
      out.write("		\r\n");
      out.write("		//여기에서 공공 데이터 API요청\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			data : { //파라미터\r\n");
      out.write("				startCreateDt :scd, //시작일\r\n");
      out.write("				endCreateDt : ecd, //종료일\r\n");
      out.write("			},\r\n");
      out.write("			success : sucFuncXml,\r\n");
      out.write("			error : errFunc,\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("});\r\n");
      out.write("//요청에 성공한 경우의 콜백 메소드\r\n");
      out.write("function sucFuncXml(d) {\r\n");
      out.write("	var str =\"\";\r\n");
      out.write("	var resultCode = $(d).find(\"response\").find(\"header\").find(\"resultCode\");\r\n");
      out.write("	var createDt = new Array();//등록일시분초\r\n");
      out.write("	var stateDt = new Array();//기준일\r\n");
      out.write("	var decideCnt = new Array();//누적 확진자 수\r\n");
      out.write("	var deathCnt = new Array();//누적사망자 수\r\n");
      out.write("	var accExamCnt = new Array();//누적 검사 수\r\n");
      out.write("	var todayDecideCnt = new Array();//금일 확진자 수\r\n");
      out.write("	\r\n");
      out.write("	//검색한 날짜 구간에서 반환된 결과데이터를 반복해서 파싱한다.\r\n");
      out.write("	$(d).find(\"response\").find(\"body\").find(\"items\").find(\"item\").each(function(index) {\r\n");
      out.write("		\r\n");
      out.write("		//find()를 통해 노드를 검색한 후 text()를 통해 값을 읽어온다.\r\n");
      out.write("		createDt[index] = $(this).find(\"createDt\").text();\r\n");
      out.write("		stateDt[index] = $(this).find(\"stateDt\").text();\r\n");
      out.write("		decideCnt[index] = $(this).find(\"decideCnt\").text();\r\n");
      out.write("		deathCnt[index] = $(this).find(\"deathCnt\").text();\r\n");
      out.write("		accExamCnt[index] = $(this).find(\"accExamCnt\").text();\r\n");
      out.write("		//콘솔에서데이터 확인\r\n");
      out.write("		console.log(stateDt[index], decideCnt[index], deathCnt[index], accExamCnt[index]);\r\n");
      out.write("	});\r\n");
      out.write("	//웹브라우저에 출력한 테이블 생성\r\n");
      out.write("	var table = \"<table class=\\\"table table-bordered mt-3\\\">\"\r\n");
      out.write("		+\"<tr class=\\\"text-center\\\">\"\r\n");
      out.write("		+\" 	<th>날짜</th>\"\r\n");
      out.write("		+\" 	<th>금일확진자수</th>\"\r\n");
      out.write("		+\" 	<th>누적확진자수</th>\"\r\n");
      out.write("		+\" 	<th>누적사망자수</th>\"\r\n");
      out.write("		+\" 	<th>누적검사수</th>\"\r\n");
      out.write("		+\" </tr>\";\r\n");
      out.write("		\r\n");
      out.write("		for(var i=0; i< decideCnt.length-1; i++){\r\n");
      out.write("			//금일확진자수 계산 = 오늘확진자수 - 어제확진자수\r\n");
      out.write("			todayDecideCnt[i] = decideCnt[i] - decideCnt[i+1];\r\n");
      out.write("			\r\n");
      out.write("			console.log(\"날짜\", createDt[i]);\r\n");
      out.write("			console.log(\"금일확진자\", todayDecideCnt[i]);\r\n");
      out.write("			\r\n");
      out.write("			table += \"\"\r\n");
      out.write("				+\"<tr class=\\\"text-center\\\">\"\r\n");
      out.write("				+\" 	<td>\"+createDt[i]+\"</th>\"\r\n");
      out.write("				+\" 	<td>\"+todayDecideCnt[i]+\"</th>\"\r\n");
      out.write("				+\" 	<td>\"+decideCnt[i]+\"</th>\"\r\n");
      out.write("				+\" 	<td>\"+deathCnt[i]+\"</th>\"\r\n");
      out.write("				+\" 	<td>\"+accExamCnt[i]+\"</th>\"\r\n");
      out.write("				+\" </tr>\";\r\n");
      out.write("		}\r\n");
      out.write("		table += \"</table>\";\r\n");
      out.write("		$('#resultShow').html(table);\r\n");
      out.write("	}	\r\n");
      out.write("	function errFunc(e){\r\n");
      out.write("		alert(\"실패:\"+e.status+\":\"+e.statusText);\r\n");
      out.write("}\r\n");
      out.write("</script> \r\n");
      out.write(" \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	<h2>공공데이터를 활용한 Covid19 확진자 현황</h2>\r\n");
      out.write("	<form >\r\n");
      out.write("		시작일 : <input type=\"text\" name=\"startCreateDt\" id=\"startCreateDt\" />\r\n");
      out.write("		종료일 : <input type=\"text\" name=\"endCreateDt\" id=\"endCreateDt\" />\r\n");
      out.write("		<input type=\"button\" id=\"submitBtn\" value=\"요청하기\" />\r\n");
      out.write("	</form>\r\n");
      out.write("	<div id=\"resultShow\">\r\n");
      out.write("	\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
